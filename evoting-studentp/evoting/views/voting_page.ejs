<link rel="stylesheet" type="text/css" href="/css/stage1.css" />
<link rel="stylesheet" type="text/css" href="/css/voting_page.css" />
<style>
  .custom-select {
  position: relative;
  font-family: Arial;
}

.custom-select select {
  display: none; /*hide original SELECT element:*/
}

.select-selected {
  background-color: #3d3f41;
  border-bottom: 1px solid white;
}

/*style the arrow inside the select element:*/
.select-selected:after {
  position: absolute;
  content: "";
  top: 14px;
  right: 10px;
  width: 0;
  height: 0;
  border: 6px solid transparent;
  border-color: #fff transparent transparent transparent;
}

/*point the arrow upwards when the select box is open (active):*/
.select-selected.select-arrow-active:after {
  border-color: transparent transparent #fff transparent;
  top: 7px;
}

/*style the items (options), including the selected item:*/
.select-items div,.select-selected {
  color: #ffffff;
  padding: 8px 16px;
  border: 1px solid white;
  border-color: transparent transparent rgba(0, 0, 0, 0.1) transparent;
  cursor: pointer;
  user-select: none;
}

/*style items (options):*/
.select-items {
    background-color: #3d3f41;
    /* top: 100%; */
    /* bottom: 300px; */
    left: 0;
    right: 0;
    z-index: 99;
    border: 1px solid white;
    z-index: 99;
}

/*hide the items when the select box is closed:*/
.select-hide {
  display: none;
}

.select-items div:hover, .same-as-selected {
  background-color: rgba(0, 0, 0, 0.1);
}
</style>
<div class="body" style="box-sizing: border-box; display: flex; flex-direction: column; justify-content: start;">
    <div id="endTime" style="text-align: center; color : white; text-shadow: -2px -2px black;">
        <h2 id="end"></h2>
    </div>
    <form id="form1" action="/vote/count?e_id=<%= e_id%>" class="election-box" method="POST">
    <% for(var i = 0; i < data.positions.length; i++) { %>
        <div class="positions">
            <p class="position-h" style="background-color: rgb(36 37 39);"><%= data.positions[i].name %></p>
            <div class="custom-select" style="height:auto">
                <select  name='<%= data.positions[i]._id %>' style="background-color: rgb(14 14 13);
                    border-radius: 0px 0px 0px 0px;
                    color:wheat;
                    font-size: 20px;
                    border: none; height: auto; outline:none; border:none; z-index: 5;" >
                    <% for(var j = 0; j < data.positions[i].candidate.length; j++) {%>
                    <option value='<%= data.positions[i].candidate[j]._id%>'>
                        <%= data.positions[i].candidate[j].name %>
                    </option>
                        <% } %>
                </select>
            </div>
        </div>
    <% } %>
    </form>
    <div style="margin-top: 10px;">
        <a><button type="submit" form="form1"style="height: 45px;
            width: 150px;
            background-color: #2a2323;
            color: white;
            font-size: 20px;
            font-weight: bold;
            border: none;
            box-shadow: 0px 0px 2px 0px white">Submit</button></a>
    </div>
</div>
<script src="/js/updateTime.js"></script>
<div style="display: none;">
<script>
  function preventBack() {
        window.history.forward();
    }

    setTimeout("preventBack()", 0);
    window.onunload = function() {
        null
    };
    let end = document.getElementById('end');
    data = JSON.parse('<%- JSON.stringify(data) %>');
    setInterval(() => {
        const diffTime = new Date(data.endTime) - new Date();
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        const diffHrs =  Math.floor(diffTime / (1000 * 60 * 60) - (diffDays * 24));
        const diffMins = Math.floor(diffTime / (1000 * 60) - diffHrs * 60 - (diffDays * 24 * 60));
        const diffSecs = Math.floor(diffTime / (1000) - diffMins * 60 - diffHrs * 60 * 60 - (diffDays * 24 * 60 * 60));
        if(diffTime < 0){
            window.location.replace("http://localhost:5000/");
        }
        end.innerHTML = diffDays + ' d ' + diffHrs + ' h '+ diffMins + ' m '+ diffSecs + ' s';
    }, 1000);

var x, i, j, l, ll, selElmnt, a, b, c;
/*look for any elements with the class "custom-select":*/
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /*for each element, create a new DIV that will act as the selected item:*/
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /*for each element, create a new DIV that will contain the option list:*/
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /*for each option in the original select element,
    create a new DIV that will act as an option item:*/
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /*when an item is clicked, update the original select box,
        and the selected item:*/
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
      /*when the select box is clicked, close any other select boxes,
      and open/close the current select box:*/
      e.stopPropagation();
      closeAllSelect(this);
      this.nextSibling.classList.toggle("select-hide");
      this.classList.toggle("select-arrow-active");
    });
}
function closeAllSelect(elmnt) {
  /*a function that will close all select boxes in the document,
  except the current select box:*/
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}
/*if the user clicks anywhere outside the select box,
then close all select boxes:*/
document.addEventListener("click", closeAllSelect);
// let items = document.getElementsByClassName('select-items');
// items.addEventListener('hover', function(e) {
//     console.log(e.id);
// })

</script>
</div>